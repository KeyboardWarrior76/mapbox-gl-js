define(["./shared"],(function(e){function t(e){const t=e?e.url.toString():void 0;return t?performance.getEntriesByName(t):[]}function o(e){if("number"==typeof e||"boolean"==typeof e||"string"==typeof e||null==e)return JSON.stringify(e);if(Array.isArray(e)){let t="[";for(const s of e)t+=`${o(s)},`;return`${t}]`}let t="{";for(const s of Object.keys(e).sort())t+=`${s}:${o(e[s])},`;return`${t}}`}function s(t){let s="";for(const i of e.bg)s+=`/${o(t[i])}`;return s}class i{constructor(e){this.keyCache={},this._layers={},this._layerConfigs={},e&&this.replace(e)}replace(e,t){this._layerConfigs={},this._layers={},this.update(e,[],t)}update(t,o,i){this._options=i;for(const o of t)this._layerConfigs[o.id]=o,(this._layers[o.id]=e.cq(o,this.scope,null,this._options)).compileFilter(i),this.keyCache[o.id]&&delete this.keyCache[o.id];for(const e of o)delete this.keyCache[e],delete this._layerConfigs[e],delete this._layers[e];this.familiesBySource={};const n=function(e,t){const o={};for(let i=0;i<e.length;i++){const n=t&&t[e[i].id]||s(e[i]);t&&(t[e[i].id]=n);let r=o[n];r||(r=o[n]=[]),r.push(e[i])}const i=[];for(const e in o)i.push(o[e]);return i}(e.bd(this._layerConfigs),this.keyCache);for(const e of n){const t=e.map((e=>this._layers[e.id])),o=t[0];if("none"===o.visibility)continue;const s=o.source||"";let i=this.familiesBySource[s];i||(i=this.familiesBySource[s]={});const n=o.sourceLayer||"_geojsonTileLayer";let r=i[n];r||(r=i[n]=[]),r.push(t)}}}const n=1*e.dP;class r{constructor(t){const o={},s=[];for(const e in t){const i=t[e],r=o[e]={};for(const e in i.glyphs){const t=i.glyphs[+e];if(!t||0===t.bitmap.width||0===t.bitmap.height)continue;const o=t.metrics.localGlyph?n:1,a={x:0,y:0,w:t.bitmap.width+2*o,h:t.bitmap.height+2*o};s.push(a),r[e]=a}}const{w:i,h:r}=e.z(s),a=new e.dO({width:i||1,height:r||1});for(const s in t){const i=t[s];for(const t in i.glyphs){const r=i.glyphs[+t];if(!r||0===r.bitmap.width||0===r.bitmap.height)continue;const l=o[s][t],c=r.metrics.localGlyph?n:1;e.dO.copy(r.bitmap,a,{x:0,y:0},{x:l.x+c,y:l.y+c},r.bitmap)}}this.image=a,this.positions=o}}e.dN(r,"GlyphAtlas");class a{constructor(t){this.tileID=new e.aA(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.tileZoom=t.tileZoom,this.uid=t.uid,this.zoom=t.zoom,this.lut=t.lut,this.canonical=t.tileID.canonical,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.scope=t.scope,this.overscaling=this.tileID.overscaleFactor(),this.showCollisionBoxes=t.showCollisionBoxes,this.collectResourceTiming=!!t.collectResourceTiming,this.promoteId=t.promoteId,this.isSymbolTile=t.isSymbolTile,this.tileTransform=e.aK(t.tileID.canonical,t.projection),this.projection=t.projection,this.brightness=t.brightness,this.extraShadowCaster=!!t.extraShadowCaster,this.tessellationStep=t.tessellationStep}parse(t,o,s,i,n){this.status="parsing",this.data=t,this.collisionBoxArray=new e.aQ;const a=new e.dQ(Object.keys(t.layers).sort()),c=new e.dR(this.tileID,this.promoteId);c.bucketLayerIDs=[];const h={},u=new e.dS(256,256),d={featureIndex:c,iconDependencies:{},patternDependencies:{},glyphDependencies:{},lineAtlas:u,availableImages:s,brightness:this.brightness},f=o.familiesBySource[this.source];for(const o in f){const i=t.layers[o];if(!i)continue;let n=!1,r=!1,u=!1;for(const e of f[o])"symbol"===e[0].type?n=!0:r=!0,e[0].is3D()&&"model"!==e[0].type&&(u=!0);if(this.extraShadowCaster&&!u)continue;if(!0===this.isSymbolTile&&!n)continue;if(!1===this.isSymbolTile&&!r)continue;1===i.version&&e.w(`Vector tile source "${this.source}" layer "${o}" does not use vector tile spec v2 and therefore may have some rendering errors.`);const p=a.encode(o),g=[];for(let e=0;e<i.length;e++){const t=i.feature(e),s=c.getId(t,o);g.push({feature:t,id:s,index:e,sourceLayerIndex:p})}for(const e of f[o]){const t=e[0];(!this.extraShadowCaster||t.is3D()&&"model"!==t.type)&&(void 0!==this.isSymbolTile&&"symbol"===t.type!==this.isSymbolTile||t.minzoom&&this.zoom<Math.floor(t.minzoom)||t.maxzoom&&this.zoom>=t.maxzoom||"none"!==t.visibility&&(l(e,this.zoom,d.brightness,s),(h[t.id]=t.createBucket({index:c.bucketLayerIDs.length,layers:e,zoom:this.zoom,lut:this.lut,canonical:this.canonical,pixelRatio:this.pixelRatio,overscaling:this.overscaling,collisionBoxArray:this.collisionBoxArray,sourceLayerIndex:p,sourceID:this.source,projection:this.projection.spec,tessellationStep:this.tessellationStep})).populate(g,d,this.tileID.canonical,this.tileTransform),c.bucketLayerIDs.push(e.map((e=>e.id)))))}}let p,g,m,y;u.trim();const x={type:"maybePrepare",isSymbolTile:this.isSymbolTile,zoom:this.zoom},w=()=>{if(p)return this.status="done",n(p);if(this.extraShadowCaster)this.status="done",n(null,{buckets:e.bd(h).filter((e=>!e.isEmpty())),featureIndex:c,collisionBoxArray:null,glyphAtlasImage:null,lineAtlas:null,imageAtlas:null,brightness:d.brightness,glyphMap:null,iconMap:null,glyphPositions:null});else if(g&&m&&y){const t=new r(g),o=new e.dU(m,y,this.lut);for(const i in h){const n=h[i];n instanceof e.aR?(l(n.layers,this.zoom,d.brightness,s),e.dV(n,g,t.positions,m,o.iconPositions,this.showCollisionBoxes,s,this.tileID.canonical,this.tileZoom,this.projection,this.brightness)):n.hasPattern&&(n instanceof e.aX||n instanceof e.aY||n instanceof e.d0)&&(l(n.layers,this.zoom,d.brightness,s),n.addFeatures(d,this.tileID.canonical,o.patternPositions,s,this.tileTransform,this.brightness))}this.status="done",n(null,{buckets:e.bd(h).filter((e=>!e.isEmpty())),featureIndex:c,collisionBoxArray:this.collisionBoxArray,glyphAtlasImage:t.image,lineAtlas:u,imageAtlas:o,brightness:d.brightness})}};if(!this.extraShadowCaster){const t=e.dT(d.glyphDependencies,(e=>Object.keys(e).map(Number)));Object.keys(t).length?i.send("getGlyphs",{uid:this.uid,stacks:t,scope:this.scope},((e,t)=>{p||(p=e,g=t,w())}),void 0,!1,x):g={};const o=Object.keys(d.iconDependencies);o.length?i.send("getImages",{icons:o,source:this.source,scope:this.scope,tileID:this.tileID,type:"icons"},((e,t)=>{p||(p=e,m=t,w())}),void 0,!1,x):m={};const s=Object.keys(d.patternDependencies);s.length?i.send("getImages",{icons:s,source:this.source,scope:this.scope,tileID:this.tileID,type:"patterns"},((e,t)=>{p||(p=e,y=t,w())}),void 0,!1,x):y={}}w()}}function l(t,o,s,i){const n=new e.a3(o,{brightness:s});for(const e of t)e.recalculate(n,i)}class c extends e.E{constructor(t,o,s,i,n,r){super(),this.actor=t,this.layerIndex=o,this.availableImages=s,this.loadVectorData=n||e.aw,this.loading={},this.loaded={},this.deduped=new e.au(t.scheduler),this.isSpriteLoaded=i,this.scheduler=t.scheduler,this.brightness=r}loadTile(o,s){const i=o.uid,n=o&&o.request,r=n&&n.collectResourceTiming,l=this.loading[i]=new a(o);l.abort=this.loadVectorData(o,((a,c)=>{const h=!this.loading[i];if(delete this.loading[i],h||a||!c)return l.status="done",h||(this.loaded[i]=l),s(a);const u=c.rawData,d={};c.expires&&(d.expires=c.expires),c.cacheControl&&(d.cacheControl=c.cacheControl),l.vectorTile=c.vectorTile||new e.dW.VectorTile(new e.bb(u));const f=()=>{l.parse(l.vectorTile,this.layerIndex,this.availableImages,this.actor,((o,i)=>{if(o||!i)return s(o);const a={};if(r){const e=t(n);e.length>0&&(a.resourceTiming=JSON.parse(JSON.stringify(e)))}s(null,e.l({rawTileData:u.slice(0)},i,d,a))}))};this.isSpriteLoaded?f():this.once("isSpriteLoaded",(()=>{this.scheduler?this.scheduler.add(f,{type:"parseTile",isSymbolTile:o.isSymbolTile,zoom:o.tileZoom}):f()})),this.loaded=this.loaded||{},this.loaded[i]=l}))}reloadTile(t,o){const s=this.loaded,i=t.uid;if(s&&s[i]){const n=s[i];n.showCollisionBoxes=t.showCollisionBoxes,n.projection=t.projection,n.brightness=t.brightness,n.tileTransform=e.aK(t.tileID.canonical,t.projection),n.extraShadowCaster=t.extraShadowCaster,n.lut=t.lut;const r=(e,t)=>{const s=n.reloadCallback;s&&(delete n.reloadCallback,n.parse(n.vectorTile,this.layerIndex,this.availableImages,this.actor,s)),o(e,t)};"parsing"===n.status?n.reloadCallback=r:"done"===n.status&&(n.vectorTile?n.parse(n.vectorTile,this.layerIndex,this.availableImages,this.actor,r):r())}else o(null,void 0)}abortTile(e,t){const o=e.uid,s=this.loading[o];s&&(s.abort&&s.abort(),delete this.loading[o]),t()}removeTile(e,t){const o=this.loaded,s=e.uid;o&&o[s]&&delete o[s],t()}}class h{loadTile(t,o){const{uid:s,encoding:i,rawImageData:n,padding:r}=t,a=ImageBitmap&&n instanceof ImageBitmap?this.getImageData(n,r):n;o(null,new e.dX(s,a,i,r<1))}getImageData(e,t){this.offscreenCanvas&&this.offscreenCanvasContext||(this.offscreenCanvas=new OffscreenCanvas(e.width,e.height),this.offscreenCanvasContext=this.offscreenCanvas.getContext("2d",{willReadFrequently:!0})),this.offscreenCanvas.width=e.width,this.offscreenCanvas.height=e.height,this.offscreenCanvasContext.drawImage(e,0,0,e.width,e.height);const o=this.offscreenCanvasContext.getImageData(-t,-t,e.width+2*t,e.height+2*t);return this.offscreenCanvasContext.clearRect(0,0,this.offscreenCanvas.width,this.offscreenCanvas.height),o}}e.ba.setPbf(e.bb);class u{decodeRasterArray({task:t,buffer:o},s){e.ba.performDecoding(o,t).then((e=>{s(null,e)}),(e=>{s(e)}))}}const d=e.dW.VectorTileFeature.prototype.toGeoJSON;class f{constructor(t){this._feature=t,this.extent=e.ab,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))}loadGeometry(){if(1===this._feature.type){const t=[];for(const o of this._feature.geometry)t.push([new e.P(o[0],o[1])]);return t}{const t=[];for(const o of this._feature.geometry){const s=[];for(const t of o)s.push(new e.P(t[0],t[1]));t.push(s)}return t}}toGeoJSON(e,t,o){return d.call(this,e,t,o)}}class p{constructor(t){this.layers={_geojsonTileLayer:this},this.name="_geojsonTileLayer",this.extent=e.ab,this.length=t.length,this._features=t}feature(e){return new f(this._features[e])}}const g=64/4096,m=128;class y{constructor(){this.features=new Map}clear(){this.features.clear()}load(e=[],t){for(const o of e){const e=o.id;if(null==e)continue;let s=this.features.get(e);s&&this.updateCache(s,t),o.geometry?(s=w(o),this.updateCache(s,t),this.features.set(e,s)):this.features.delete(e),this.updateCache(s,t)}}updateCache(e,t){for(const{canonical:o,uid:s}of Object.values(t)){const{z:i,x:n,y:r}=o;x(e,Math.pow(2,i),n,r)&&delete t[s]}}getTile(e,t,o){const s=Math.pow(2,e),i=[];for(const e of this.features.values())x(e,s,t,o)&&i.push(I(e,s,t,o));return{features:i}}getFeatures(){return[...this.features.values()]}}function x({minX:e,minY:t,maxX:o,maxY:s},i,n,r){return e<(n+1+g)/i&&t<(r+1+g)/i&&o>(n-g)/i&&s>(r-g)/i}function w(e){const{id:t,geometry:o,properties:s}=e;if(!o)return;if("GeometryCollection"===o.type)throw new Error("GeometryCollection not supported in dynamic mode.");const{type:i,coordinates:n}=o,r={id:t,type:1,geometry:[],tags:s,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0},a=r.geometry;if("Point"===i)b(n,a,r);else if("MultiPoint"===i)for(const e of n)b(e,a,r);else if("LineString"===i)r.type=2,S(n,a,r);else if("MultiLineString"===i)r.type=2,v(n,a,r);else if("Polygon"===i)r.type=3,v(n,a,r,!0);else{if("MultiPolygon"!==i)throw new Error("Input data is not a valid GeoJSON object.");r.type=3;for(const e of n)v(e,a,r,!0)}return r}function b([t,o],s,i){const n=e.am(t);let r=e.at(o);r=r<0?0:r>1?1:r,s.push(n,r),i.minX=Math.min(i.minX,n),i.minY=Math.min(i.minY,r),i.maxX=Math.max(i.maxX,n),i.maxY=Math.max(i.maxY,r)}function S(e,t,o,s=!1,i=!1){const n=[];for(const t of e)b(t,n,o);t.push(n),s&&function(e,t){let o=0;for(let t=0,s=e.length,i=s-2;t<s;i=t,t+=2)o+=(e[t]-e[i])*(e[t+1]+e[i+1]);if(o>0===t)for(let t=0,o=e.length;t<o/2;t+=2){const s=e[t],i=e[t+1];e[t]=e[o-2-t],e[t+1]=e[o-1-t],e[o-2-t]=s,e[o-1-t]=i}}(n,i)}function v(e,t,o,s=!1){for(let i=0;i<e.length;i++)S(e[i],t,o,s,0===i)}function I(t,o,s,i){const{id:n,type:r,geometry:a,tags:l}=t,c=[];if(1===r)!function(t,o,s,i,n){for(let r=0;r<t.length;r+=2){const a=Math.round(e.ab*(t[r+0]*o-s)),l=Math.round(e.ab*(t[r+1]*o-i));n.push([a,l])}}(a,o,s,i,c);else for(const e of a)M(e,o,s,i,c);return{id:n,type:r,geometry:c,tags:l}}function M(t,o,s,i,n){const r=-m,a=e.ab+m;let l;for(let c=0;c<t.length-2;c+=2){let h=Math.round(e.ab*(t[c+0]*o-s)),u=Math.round(e.ab*(t[c+1]*o-i)),d=Math.round(e.ab*(t[c+2]*o-s)),f=Math.round(e.ab*(t[c+3]*o-i));const p=d-h,g=f-u;h<r&&d<r||(h<r?(u+=Math.round(g*((r-h)/p)),h=r):d<r&&(f=u+Math.round(g*((r-h)/p)),d=r),u<r&&f<r||(u<r?(h+=Math.round(p*((r-u)/g)),u=r):f<r&&(d=h+Math.round(p*((r-u)/g)),f=r),h>=a&&d>=a||(h>=a?(u+=Math.round(g*((a-h)/p)),h=a):d>=a&&(f=u+Math.round(g*((a-h)/p)),d=a),u>=a&&f>=a||(u>=a?(h+=Math.round(p*((a-u)/g)),u=a):f>=a&&(d=h+Math.round(p*((a-u)/g)),f=a),l&&h===l[l.length-1][0]&&u===l[l.length-1][1]||(l=[[h,u]],n.push(l)),l.push([d,f])))))}}var k,T,P,C={exports:{}},_=function(){if(P)return C.exports;P=1;var t=e.d_(),o=function(){if(T)return k;T=1;var t=e.dY(),o=e.dZ().VectorTileFeature;function s(e,t){this.options=t||{},this.features=e,this.length=e.length}function i(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}return k=s,s.prototype.feature=function(e){return new i(this.features[e],this.options.extent)},i.prototype.loadGeometry=function(){var e=this.rawGeometry;this.geometry=[];for(var o=0;o<e.length;o++){for(var s=e[o],i=[],n=0;n<s.length;n++)i.push(new t(s[n][0],s[n][1]));this.geometry.push(i)}return this.geometry},i.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,o=-1/0,s=1/0,i=-1/0,n=0;n<e.length;n++)for(var r=e[n],a=0;a<r.length;a++){var l=r[a];t=Math.min(t,l.x),o=Math.max(o,l.x),s=Math.min(s,l.y),i=Math.max(i,l.y)}return[t,s,o,i]},i.prototype.toGeoJSON=o.prototype.toGeoJSON,k}();function s(e){var o=new t;return function(e,t){for(var o in e.layers)t.writeMessage(3,i,e.layers[o])}(e,o),o.finish()}function i(e,t){var o;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var s={keys:[],values:[],keycache:{},valuecache:{}};for(o=0;o<e.length;o++)s.feature=e.feature(o),t.writeMessage(2,n,s);var i=s.keys;for(o=0;o<i.length;o++)t.writeStringField(3,i[o]);var r=s.values;for(o=0;o<r.length;o++)t.writeMessage(4,h,r[o])}function n(e,t){var o=e.feature;void 0!==o.id&&t.writeVarintField(1,o.id),t.writeMessage(2,r,e),t.writeVarintField(3,o.type),t.writeMessage(4,c,o)}function r(e,t){var o=e.feature,s=e.keys,i=e.values,n=e.keycache,r=e.valuecache;for(var a in o.properties){var l=o.properties[a],c=n[a];if(null!==l){void 0===c&&(s.push(a),n[a]=c=s.length-1),t.writeVarint(c);var h=typeof l;"string"!==h&&"boolean"!==h&&"number"!==h&&(l=JSON.stringify(l));var u=h+":"+l,d=r[u];void 0===d&&(i.push(l),r[u]=d=i.length-1),t.writeVarint(d)}}}function a(e,t){return(t<<3)+(7&e)}function l(e){return e<<1^e>>31}function c(e,t){for(var o=e.loadGeometry(),s=e.type,i=0,n=0,r=o.length,c=0;c<r;c++){var h=o[c],u=1;1===s&&(u=h.length),t.writeVarint(a(1,u));for(var d=3===s?h.length-1:h.length,f=0;f<d;f++){1===f&&1!==s&&t.writeVarint(a(2,d-1));var p=h[f].x-i,g=h[f].y-n;t.writeVarint(l(p)),t.writeVarint(l(g)),i+=p,n+=g}3===s&&t.writeVarint(a(7,1))}}function h(e,t){var o=typeof e;"string"===o?t.writeStringField(1,e):"boolean"===o?t.writeBooleanField(7,e):"number"===o&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}return C.exports=s,C.exports.fromVectorTileJs=s,C.exports.fromGeojsonVt=function(e,t){t=t||{};var i={};for(var n in e)i[n]=new o(e[n].features,t),i[n].name=n,i[n].version=t.version,i[n].extent=t.extent;return s({layers:i})},C.exports.GeoJSONWrapper=o,C.exports}(),L=e.d$(_);const D={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},j=Math.fround||(O=new Float32Array(1),e=>(O[0]=+e,O[0]));var O;const z=3,A=5,Z=6;class E{constructor(e){this.options=Object.assign(Object.create(D),e),this.trees=new Array(this.options.maxZoom+1),this.stride=this.options.reduce?7:6,this.clusterProps=[]}load(e){const{log:t,minZoom:o,maxZoom:s}=this.options;t&&console.time("total time");const i=`prepare ${e.length} points`;t&&console.time(i),this.points=e;const n=[];for(let t=0;t<e.length;t++){const o=e[t];if(!o.geometry)continue;const[s,i]=o.geometry.coordinates,r=j(N(s)),a=j(X(i));n.push(r,a,1/0,t,-1,1),this.options.reduce&&n.push(0)}let r=this.trees[s+1]=this._createTree(n);t&&console.timeEnd(i);for(let e=s;e>=o;e--){const o=+Date.now();r=this.trees[e]=this._createTree(this._cluster(r,e)),t&&console.log("z%d: %d clusters in %dms",e,r.numItems,+Date.now()-o)}return t&&console.timeEnd("total time"),this}getClusters(e,t){let o=((e[0]+180)%360+360)%360-180;const s=Math.max(-90,Math.min(90,e[1]));let i=180===e[2]?180:((e[2]+180)%360+360)%360-180;const n=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)o=-180,i=180;else if(o>i){const e=this.getClusters([o,s,180,n],t),r=this.getClusters([-180,s,i,n],t);return e.concat(r)}const r=this.trees[this._limitZoom(t)],a=r.range(N(o),X(n),N(i),X(s)),l=r.data,c=[];for(const e of a){const t=this.stride*e;c.push(l[t+A]>1?F(l,t,this.clusterProps):this.points[l[t+z]])}return c}getChildren(e){const t=this._getOriginId(e),o=this._getOriginZoom(e),s="No cluster with the specified id.",i=this.trees[o];if(!i)throw new Error(s);const n=i.data;if(t*this.stride>=n.length)throw new Error(s);const r=this.options.radius/(this.options.extent*Math.pow(2,o-1)),a=i.within(n[t*this.stride],n[t*this.stride+1],r),l=[];for(const t of a){const o=t*this.stride;n[o+4]===e&&l.push(n[o+A]>1?F(n,o,this.clusterProps):this.points[n[o+z]])}if(0===l.length)throw new Error(s);return l}getLeaves(e,t,o){const s=[];return this._appendLeaves(s,e,t=t||10,o=o||0,0),s}getTile(e,t,o){const s=this.trees[this._limitZoom(e)],i=Math.pow(2,e),{extent:n,radius:r}=this.options,a=r/n,l=(o-a)/i,c=(o+1+a)/i,h={features:[]};return this._addTileFeatures(s.range((t-a)/i,l,(t+1+a)/i,c),s.data,t,o,i,h),0===t&&this._addTileFeatures(s.range(1-a/i,l,1,c),s.data,i,o,i,h),t===i-1&&this._addTileFeatures(s.range(0,l,a/i,c),s.data,-1,o,i,h),h.features.length?h:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const o=this.getChildren(e);if(t++,1!==o.length)break;e=o[0].properties.cluster_id}return t}_appendLeaves(e,t,o,s,i){const n=this.getChildren(t);for(const t of n){const n=t.properties;if(n&&n.cluster?i+n.point_count<=s?i+=n.point_count:i=this._appendLeaves(e,n.cluster_id,o,s,i):i<s?i++:e.push(t),e.length===o)break}return i}_createTree(t){const o=new e.by(t.length/this.stride|0,this.options.nodeSize,Float32Array);for(let e=0;e<t.length;e+=this.stride)o.add(t[e],t[e+1]);return o.finish(),o.data=t,o}_addTileFeatures(e,t,o,s,i,n){for(const r of e){const e=r*this.stride,a=t[e+A]>1;let l,c,h;if(a)l=Y(t,e,this.clusterProps),c=t[e],h=t[e+1];else{const o=this.points[t[e+z]];l=o.properties;const[s,i]=o.geometry.coordinates;c=N(s),h=X(i)}const u={type:1,geometry:[[Math.round(this.options.extent*(c*i-o)),Math.round(this.options.extent*(h*i-s))]],tags:l};let d;d=a||this.options.generateId?t[e+z]:this.points[t[e+z]].id,void 0!==d&&(u.id=d),n.features.push(u)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,t){const{radius:o,extent:s,reduce:i,minPoints:n}=this.options,r=o/(s*Math.pow(2,t)),a=e.data,l=[],c=this.stride;for(let o=0;o<a.length;o+=c){if(a[o+2]<=t)continue;a[o+2]=t;const s=a[o],h=a[o+1],u=e.within(a[o],a[o+1],r),d=a[o+A];let f=d;for(const e of u){const o=e*c;a[o+2]>t&&(f+=a[o+A])}if(f>d&&f>=n){let e,n=s*d,r=h*d,p=-1;const g=(o/c<<5)+(t+1)+this.points.length;for(const s of u){const l=s*c;if(a[l+2]<=t)continue;a[l+2]=t;const h=a[l+A];n+=a[l]*h,r+=a[l+1]*h,a[l+4]=g,i&&(e||(e=this._map(a,o,!0),p=this.clusterProps.length,this.clusterProps.push(e)),i(e,this._map(a,l)))}a[o+4]=g,l.push(n/f,r/f,1/0,g,-1,f),i&&l.push(p)}else{for(let e=0;e<c;e++)l.push(a[o+e]);if(f>1)for(const e of u){const o=e*c;if(!(a[o+2]<=t)){a[o+2]=t;for(let e=0;e<c;e++)l.push(a[o+e])}}}}return l}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t,o){if(e[t+A]>1){const s=this.clusterProps[e[t+Z]];return o?Object.assign({},s):s}const s=this.points[e[t+z]].properties,i=this.options.map(s);return o&&i===s?Object.assign({},i):i}}function F(e,t,o){return{type:"Feature",id:e[t+z],properties:Y(e,t,o),geometry:{type:"Point",coordinates:[(s=e[t],360*(s-.5)),W(e[t+1])]}};var s}function Y(e,t,o){const s=e[t+A],i=s>=1e4?`${Math.round(s/1e3)}k`:s>=1e3?Math.round(s/100)/10+"k":s,n=e[t+Z],r=-1===n?{}:Object.assign({},o[n]);return Object.assign(r,{cluster:!0,cluster_id:e[t+z],point_count:s,point_count_abbreviated:i})}function N(e){return e/360+.5}function X(e){const t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function W(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}function G(e,t,o,s){let i=s;const n=t+(o-t>>1);let r,a=o-t;const l=e[t],c=e[t+1],h=e[o],u=e[o+1];for(let s=t+3;s<o;s+=3){const t=B(e[s],e[s+1],l,c,h,u);if(t>i)r=s,i=t;else if(t===i){const e=Math.abs(s-n);e<a&&(r=s,a=e)}}i>s&&(r-t>3&&G(e,t,r,s),e[r+2]=i,o-r>3&&G(e,r,o,s))}function B(e,t,o,s,i,n){let r=i-o,a=n-s;if(0!==r||0!==a){const l=((e-o)*r+(t-s)*a)/(r*r+a*a);l>1?(o=i,s=n):l>0&&(o+=r*l,s+=a*l)}return r=e-o,a=t-s,r*r+a*a}function J(e,t,o,s){const i={id:e??null,type:t,geometry:o,tags:s,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};if("Point"===t||"MultiPoint"===t||"LineString"===t)R(i,o);else if("Polygon"===t)R(i,o[0]);else if("MultiLineString"===t)for(const e of o)R(i,e);else if("MultiPolygon"===t)for(const e of o)R(i,e[0]);return i}function R(e,t){for(let o=0;o<t.length;o+=3)e.minX=Math.min(e.minX,t[o]),e.minY=Math.min(e.minY,t[o+1]),e.maxX=Math.max(e.maxX,t[o]),e.maxY=Math.max(e.maxY,t[o+1])}function V(e,t,o,s){if(!t.geometry)return;const i=t.geometry.coordinates;if(i&&0===i.length)return;const n=t.geometry.type,r=Math.pow(o.tolerance/((1<<o.maxZoom)*o.extent),2);let a=[],l=t.id;if(o.promoteId?l=t.properties[o.promoteId]:o.generateId&&(l=s||0),"Point"===n)$(i,a);else if("MultiPoint"===n)for(const e of i)$(e,a);else if("LineString"===n)q(i,a,r,!1);else if("MultiLineString"===n){if(o.lineMetrics){for(const o of i)a=[],q(o,a,r,!1),e.push(J(l,"LineString",a,t.properties));return}U(i,a,r,!1)}else if("Polygon"===n)U(i,a,r,!0);else{if("MultiPolygon"!==n){if("GeometryCollection"===n){for(const i of t.geometry.geometries)V(e,{id:l,geometry:i,properties:t.properties},o,s);return}throw new Error("Input data is not a valid GeoJSON object.")}for(const e of i){const t=[];U(e,t,r,!0),a.push(t)}}e.push(J(l,n,a,t.properties))}function $(e,t){t.push(K(e[0]),Q(e[1]),0)}function q(e,t,o,s){let i,n,r=0;for(let o=0;o<e.length;o++){const a=K(e[o][0]),l=Q(e[o][1]);t.push(a,l,0),o>0&&(r+=s?(i*l-a*n)/2:Math.sqrt(Math.pow(a-i,2)+Math.pow(l-n,2))),i=a,n=l}const a=t.length-3;t[2]=1,G(t,0,a,o),t[a+2]=1,t.size=Math.abs(r),t.start=0,t.end=t.size}function U(e,t,o,s){for(let i=0;i<e.length;i++){const n=[];q(e[i],n,o,s),t.push(n)}}function K(e){return e/360+.5}function Q(e){const t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function H(e,t,o,s,i,n,r,a){if(s/=t,n>=(o/=t)&&r<s)return e;if(r<o||n>=s)return null;const l=[];for(const t of e){const e=t.geometry;let n=t.type;const r=0===i?t.minX:t.minY,c=0===i?t.maxX:t.maxY;if(r>=o&&c<s){l.push(t);continue}if(c<o||r>=s)continue;let h=[];if("Point"===n||"MultiPoint"===n)ee(e,h,o,s,i);else if("LineString"===n)te(e,h,o,s,i,!1,a.lineMetrics);else if("MultiLineString"===n)se(e,h,o,s,i,!1);else if("Polygon"===n)se(e,h,o,s,i,!0);else if("MultiPolygon"===n)for(const t of e){const e=[];se(t,e,o,s,i,!0),e.length&&h.push(e)}if(h.length){if(a.lineMetrics&&"LineString"===n){for(const e of h)l.push(J(t.id,n,e,t.tags));continue}"LineString"!==n&&"MultiLineString"!==n||(1===h.length?(n="LineString",h=h[0]):n="MultiLineString"),"Point"!==n&&"MultiPoint"!==n||(n=3===h.length?"Point":"MultiPoint"),l.push(J(t.id,n,h,t.tags))}}return l.length?l:null}function ee(e,t,o,s,i){for(let n=0;n<e.length;n+=3){const r=e[n+i];r>=o&&r<=s&&ie(t,e[n],e[n+1],e[n+2])}}function te(e,t,o,s,i,n,r){let a=oe(e);const l=0===i?ne:re;let c,h,u=e.start;for(let d=0;d<e.length-3;d+=3){const f=e[d],p=e[d+1],g=e[d+2],m=e[d+3],y=e[d+4],x=0===i?f:p,w=0===i?m:y;let b=!1;r&&(c=Math.sqrt(Math.pow(f-m,2)+Math.pow(p-y,2))),x<o?w>o&&(h=l(a,f,p,m,y,o),r&&(a.start=u+c*h)):x>s?w<s&&(h=l(a,f,p,m,y,s),r&&(a.start=u+c*h)):ie(a,f,p,g),w<o&&x>=o&&(h=l(a,f,p,m,y,o),b=!0),w>s&&x<=s&&(h=l(a,f,p,m,y,s),b=!0),!n&&b&&(r&&(a.end=u+c*h),t.push(a),a=oe(e)),r&&(u+=c)}let d=e.length-3;const f=e[d],p=e[d+1],g=0===i?f:p;g>=o&&g<=s&&ie(a,f,p,e[d+2]),d=a.length-3,n&&d>=3&&(a[d]!==a[0]||a[d+1]!==a[1])&&ie(a,a[0],a[1],a[2]),a.length&&t.push(a)}function oe(e){const t=[];return t.size=e.size,t.start=e.start,t.end=e.end,t}function se(e,t,o,s,i,n){for(const r of e)te(r,t,o,s,i,n,!1)}function ie(e,t,o,s){e.push(t,o,s)}function ne(e,t,o,s,i,n){const r=(n-t)/(s-t);return ie(e,n,o+(i-o)*r,1),r}function re(e,t,o,s,i,n){const r=(n-o)/(i-o);return ie(e,t+(s-t)*r,n,1),r}function ae(e,t){const o=[];for(let s=0;s<e.length;s++){const i=e[s],n=i.type;let r;if("Point"===n||"MultiPoint"===n||"LineString"===n)r=le(i.geometry,t);else if("MultiLineString"===n||"Polygon"===n){r=[];for(const e of i.geometry)r.push(le(e,t))}else if("MultiPolygon"===n){r=[];for(const e of i.geometry){const o=[];for(const s of e)o.push(le(s,t));r.push(o)}}o.push(J(i.id,n,r,i.tags))}return o}function le(e,t){const o=[];o.size=e.size,void 0!==e.start&&(o.start=e.start,o.end=e.end);for(let s=0;s<e.length;s+=3)o.push(e[s]+t,e[s+1],e[s+2]);return o}function ce(e,t){if(e.transformed)return e;const o=1<<e.z,s=e.x,i=e.y;for(const n of e.features){const e=n.geometry,r=n.type;if(n.geometry=[],1===r)for(let r=0;r<e.length;r+=2)n.geometry.push(he(e[r],e[r+1],t,o,s,i));else for(let r=0;r<e.length;r++){const a=[];for(let n=0;n<e[r].length;n+=2)a.push(he(e[r][n],e[r][n+1],t,o,s,i));n.geometry.push(a)}}return e.transformed=!0,e}function he(e,t,o,s,i,n){return[Math.round(o*(e*s-i)),Math.round(o*(t*s-n))]}function ue(e,t,o,s,i){const n=t===i.maxZoom?0:i.tolerance/((1<<t)*i.extent),r={features:[],numPoints:0,numSimplified:0,numFeatures:e.length,source:null,x:o,y:s,z:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0};for(const t of e)de(r,t,n,i);return r}function de(e,t,o,s){const i=t.geometry,n=t.type,r=[];if(e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),"Point"===n||"MultiPoint"===n)for(let t=0;t<i.length;t+=3)r.push(i[t],i[t+1]),e.numPoints++,e.numSimplified++;else if("LineString"===n)fe(r,i,e,o,!1,!1);else if("MultiLineString"===n||"Polygon"===n)for(let t=0;t<i.length;t++)fe(r,i[t],e,o,"Polygon"===n,0===t);else if("MultiPolygon"===n)for(let t=0;t<i.length;t++){const s=i[t];for(let t=0;t<s.length;t++)fe(r,s[t],e,o,!0,0===t)}if(r.length){let o=t.tags||null;if("LineString"===n&&s.lineMetrics){o={};for(const e in t.tags)o[e]=t.tags[e];o.mapbox_clip_start=i.start/i.size,o.mapbox_clip_end=i.end/i.size}const a={geometry:r,type:"Polygon"===n||"MultiPolygon"===n?3:"LineString"===n||"MultiLineString"===n?2:1,tags:o};null!==t.id&&(a.id=t.id),e.features.push(a)}}function fe(e,t,o,s,i,n){const r=s*s;if(s>0&&t.size<(i?r:s))return void(o.numPoints+=t.length/3);const a=[];for(let e=0;e<t.length;e+=3)(0===s||t[e+2]>r)&&(o.numSimplified++,a.push(t[e],t[e+1])),o.numPoints++;i&&function(e,t){let o=0;for(let t=0,s=e.length,i=s-2;t<s;i=t,t+=2)o+=(e[t]-e[i])*(e[t+1]+e[i+1]);if(o>0===t)for(let t=0,o=e.length;t<o/2;t+=2){const s=e[t],i=e[t+1];e[t]=e[o-2-t],e[t+1]=e[o-1-t],e[o-2-t]=s,e[o-1-t]=i}}(a,n),e.push(a)}const pe={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,debug:0};class ge{constructor(e,t){const o=(t=this.options=function(e,t){for(const o in t)e[o]=t[o];return e}(Object.create(pe),t)).debug;if(o&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(t.promoteId&&t.generateId)throw new Error("promoteId and generateId cannot be used together.");let s=function(e,t){const o=[];if("FeatureCollection"===e.type)for(let s=0;s<e.features.length;s++)V(o,e.features[s],t,s);else V(o,"Feature"===e.type?e:{geometry:e},t);return o}(e,t);this.tiles={},this.tileCoords=[],o&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),s=function(e,t){const o=t.buffer/t.extent;let s=e;const i=H(e,1,-1-o,o,0,-1,2,t),n=H(e,1,1-o,2+o,0,-1,2,t);return(i||n)&&(s=H(e,1,-o,1+o,0,-1,2,t)||[],i&&(s=ae(i,1).concat(s)),n&&(s=s.concat(ae(n,-1)))),s}(s,t),s.length&&this.splitTile(s,0,0,0),o&&(s.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}splitTile(e,t,o,s,i,n,r){const a=[e,t,o,s],l=this.options,c=l.debug;for(;a.length;){s=a.pop(),o=a.pop(),t=a.pop(),e=a.pop();const h=1<<t,u=me(t,o,s);let d=this.tiles[u];if(!d&&(c>1&&console.time("creation"),d=this.tiles[u]=ue(e,t,o,s,l),this.tileCoords.push({z:t,x:o,y:s}),c)){c>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,o,s,d.numFeatures,d.numPoints,d.numSimplified),console.timeEnd("creation"));const e=`z${t}`;this.stats[e]=(this.stats[e]||0)+1,this.total++}if(d.source=e,null==i){if(t===l.indexMaxZoom||d.numPoints<=l.indexMaxPoints)continue}else{if(t===l.maxZoom||t===i)continue;if(null!=i){const e=i-t;if(o!==n>>e||s!==r>>e)continue}}if(d.source=null,0===e.length)continue;c>1&&console.time("clipping");const f=.5*l.buffer/l.extent,p=.5-f,g=.5+f,m=1+f;let y=null,x=null,w=null,b=null,S=H(e,h,o-f,o+g,0,d.minX,d.maxX,l),v=H(e,h,o+p,o+m,0,d.minX,d.maxX,l);e=null,S&&(y=H(S,h,s-f,s+g,1,d.minY,d.maxY,l),x=H(S,h,s+p,s+m,1,d.minY,d.maxY,l),S=null),v&&(w=H(v,h,s-f,s+g,1,d.minY,d.maxY,l),b=H(v,h,s+p,s+m,1,d.minY,d.maxY,l),v=null),c>1&&console.timeEnd("clipping"),a.push(y||[],t+1,2*o,2*s),a.push(x||[],t+1,2*o,2*s+1),a.push(w||[],t+1,2*o+1,2*s),a.push(b||[],t+1,2*o+1,2*s+1)}}getTile(e,t,o){e=+e,t=+t,o=+o;const s=this.options,{extent:i,debug:n}=s;if(e<0||e>24)return null;const r=1<<e,a=me(e,t=t+r&r-1,o);if(this.tiles[a])return ce(this.tiles[a],i);n>1&&console.log("drilling down to z%d-%d-%d",e,t,o);let l,c=e,h=t,u=o;for(;!l&&c>0;)c--,h>>=1,u>>=1,l=this.tiles[me(c,h,u)];return l&&l.source?(n>1&&(console.log("found parent tile z%d-%d-%d",c,h,u),console.time("drilling down")),this.splitTile(l.source,c,h,u,e,t,o),n>1&&console.timeEnd("drilling down"),this.tiles[a]?ce(this.tiles[a],i):null):null}}function me(e,t,o){return 32*((1<<e)*o+t)+e}function ye(e,t){const o=e.tileID.canonical;if(!this._geoJSONIndex)return void t(null,null);const s=this._geoJSONIndex.getTile(o.z,o.x,o.y);if(!s)return void t(null,null);const i=new p(s.features);let n=L(i);0===n.byteOffset&&n.byteLength===n.buffer.byteLength||(n=new Uint8Array(n)),t(null,{vectorTile:i,rawData:n.buffer})}class xe extends c{constructor(e,t,o,s,i,n){super(e,t,o,s,ye,n),i&&(this.loadGeoJSON=i),this._dynamicIndex=new y}loadData(o,s){const i=o&&o.request,n=i&&i.collectResourceTiming;this.loadGeoJSON(o,((r,a)=>{if(r||!a)return s(r);if("object"!=typeof a)return s(new Error(`Input data given to '${o.source}' is not a valid GeoJSON object.`));{try{if(o.filter){const t=e.M(o.filter,{type:"boolean","property-type":"data-driven",overridable:!1,transition:!1});if("error"===t.result)throw new Error(t.value.map((e=>`${e.key}: ${e.message}`)).join(", "));a.features=a.features.filter((e=>t.value.evaluate({zoom:0},e)))}o.dynamic?("Feature"===a.type&&(a={type:"FeatureCollection",features:[a]}),o.append||(this._dynamicIndex.clear(),this.loaded={}),this._dynamicIndex.load(a.features,this.loaded),o.cluster&&(a.features=this._dynamicIndex.getFeatures())):this.loaded={},this._geoJSONIndex=o.cluster?new E(function({superclusterOptions:t,clusterProperties:o}){if(!o||!t)return t;const s={},i={},n={accumulated:null,zoom:0},r={properties:null},a=Object.keys(o);for(const t of a){const[n,r]=o[t],a=e.M(r),l=e.M("string"==typeof n?[n,["accumulated"],["get",t]]:n);s[t]=a.value,i[t]=l.value}return t.map=e=>{r.properties=e;const t={};for(const e of a)t[e]=s[e].evaluate(n,r);return t},t.reduce=(e,t)=>{r.properties=t;for(const t of a)n.accumulated=e[t],e[t]=i[t].evaluate(n,r)},t}(o)).load(a.features):o.dynamic?this._dynamicIndex:function(e,t){return new ge(e,t)}(a,o.geojsonVtOptions)}catch(e){return s(e)}const r={};if(n){const e=t(i);e&&(r.resourceTiming={},r.resourceTiming[o.source]=JSON.parse(JSON.stringify(e)))}s(null,r)}}))}reloadTile(e,t){const o=this.loaded;return o&&o[e.uid]?e.partial?t(null,void 0):super.reloadTile(e,t):this.loadTile(e,t)}loadGeoJSON(t,o){if(t.request)e.n(t.request,o);else{if("string"!=typeof t.data)return o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));try{return o(null,JSON.parse(t.data))}catch(e){return o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`))}}}getClusterExpansionZoom(e,t){try{t(null,this._geoJSONIndex.getClusterExpansionZoom(e.clusterId))}catch(e){t(e)}}getClusterChildren(e,t){try{t(null,this._geoJSONIndex.getChildren(e.clusterId))}catch(e){t(e)}}getClusterLeaves(e,t){try{t(null,this._geoJSONIndex.getLeaves(e.clusterId,e.limit,e.offset))}catch(e){t(e)}}}class we{constructor(t,o){this.tileID=new e.aA(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.tileZoom=t.tileZoom,this.uid=t.uid,this.zoom=t.zoom,this.canonical=t.tileID.canonical,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.overscaling=this.tileID.overscaleFactor(),this.projection=t.projection,this.brightness=o}parse(t,o,s,i){this.status="parsing";const n=new e.aA(s.tileID.overscaledZ,s.tileID.wrap,s.tileID.canonical.z,s.tileID.canonical.x,s.tileID.canonical.y),r={},a=o.familiesBySource[s.source],l=new e.dR(n,s.promoteId);return l.bucketLayerIDs=[],l.is3DTile=!0,e.e0(t).then((t=>{if(!t)return i(new Error("Could not parse tile"));const o=e.e1(t,1/e.c8(s.tileID.canonical)),c=t.json.extensionsUsed&&t.json.extensionsUsed.includes("MAPBOX_mesh_features")||t.json.asset.extras&&t.json.asset.extras.MAPBOX_mesh_features,h=t.json.extensionsUsed&&t.json.extensionsUsed.includes("EXT_meshopt_compression"),u=new e.a3(this.zoom,{brightness:this.brightness});for(const t in a)for(const s of a[t]){const t=s[0];l.bucketLayerIDs.push(s.map((e=>e.id))),t.recalculate(u,[]);const i=new e.e2(o,n,c,h,this.brightness,l);c||(i.needsUpload=!0),r[t.fqid]=i,i.evaluate(t)}this.status="done",i(null,{buckets:r,featureIndex:l})})).catch((e=>i(new Error(e.message))))}}class be{constructor(e,t,o,s,i,n){this.actor=e,this.layerIndex=t,this.brightness=n,this.loading={},this.loaded={}}loadTile(t,o){const s=t.uid,i=this.loading[s]=new we(t,this.brightness);e.bc(t.request,((e,n)=>{const r=!this.loading[s];return delete this.loading[s],r||e?(i.status="done",r||(this.loaded[s]=i),o(e)):n&&0!==n.byteLength?void i.parse(n,this.layerIndex,t,((e,t)=>{i.status="done",this.loaded=this.loaded||{},this.loaded[s]=i,e||!t?o(e):o(null,t)})):(i.status="done",this.loaded[s]=i,o())}))}reloadTile(e,t){const o=this.loaded,s=e.uid;if(o&&o[s]){const i=o[s];i.projection=e.projection,i.brightness=e.brightness;const n=(o,s)=>{i.reloadCallback&&(delete i.reloadCallback,this.loadTile(e,t)),t(o,s)};"parsing"===i.status?i.reloadCallback=n:"done"===i.status&&this.loadTile(e,t)}}abortTile(e,t){const o=e.uid;this.loading[o]&&delete this.loading[o],t()}removeTile(e,t){const o=this.loaded,s=e.uid;o&&o[s]&&delete o[s],t()}}class Se{constructor(t){this.self=t,this.actor=new e.e3(t,this),this.layerIndexes={},this.availableImages={},this.isSpriteLoaded={},this.projections={},this.defaultProjection=e.bL({name:"mercator"}),this.workerSourceTypes={vector:c,geojson:xe,"batched-model":be},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=(e,t)=>{if(this.workerSourceTypes[e])throw new Error(`Worker source with name "${e}" already registered.`);this.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=t=>{if(e.e4.isParsed())throw new Error("RTL text plugin already registered.");e.e4.applyArabicShaping=t.applyArabicShaping,e.e4.processBidirectionalText=t.processBidirectionalText,e.e4.processStyledBidirectionalText=t.processStyledBidirectionalText}}clearCaches(e,t,o){delete this.layerIndexes[e],delete this.availableImages[e],delete this.workerSources[e],delete this.demWorkerSources[e],delete this.rasterArrayWorkerSource,o()}checkIfReady(e,t,o){o()}setReferrer(e,t){this.referrer=t}spriteLoaded(t,{scope:o,isLoaded:s}){if(this.isSpriteLoaded[t]||(this.isSpriteLoaded[t]={}),this.isSpriteLoaded[t][o]=s,this.workerSources[t]&&this.workerSources[t][o])for(const i in this.workerSources[t][o]){const n=this.workerSources[t][o][i];for(const t in n){const o=n[t];o instanceof c&&(o.isSpriteLoaded=s,o.fire(new e.x("isSpriteLoaded")))}}}setImages(e,{scope:t,images:o},s){if(this.availableImages[e]||(this.availableImages[e]={}),this.availableImages[e][t]=o,this.workerSources[e]&&this.workerSources[e][t]){for(const s in this.workerSources[e][t]){const i=this.workerSources[e][t][s];for(const e in i)i[e].availableImages=o}s()}else s()}setProjection(t,o){this.projections[t]=e.bL(o)}setBrightness(e,t,o){this.brightness=t,o()}setLayers(e,t,o){this.getLayerIndex(e,t.scope).replace(t.layers,t.options),o()}updateLayers(e,t,o){this.getLayerIndex(e,t.scope).update(t.layers,t.removedIds,t.options),o()}loadTile(e,t,o){t.projection=this.projections[e]||this.defaultProjection,this.getWorkerSource(e,t.type,t.source,t.scope).loadTile(t,o)}loadDEMTile(e,t,o){this.getDEMWorkerSource(e,t.source,t.scope).loadTile(t,o)}decodeRasterArray(e,t,o){this.getRasterArrayWorkerSource().decodeRasterArray(t,o)}reloadTile(e,t,o){t.projection=this.projections[e]||this.defaultProjection,this.getWorkerSource(e,t.type,t.source,t.scope).reloadTile(t,o)}abortTile(e,t,o){this.getWorkerSource(e,t.type,t.source,t.scope).abortTile(t,o)}removeTile(e,t,o){this.getWorkerSource(e,t.type,t.source,t.scope).removeTile(t,o)}removeSource(e,t,o){if(!(this.workerSources[e]&&this.workerSources[e][t.scope]&&this.workerSources[e][t.scope][t.type]&&this.workerSources[e][t.scope][t.type][t.source]))return;const s=this.workerSources[e][t.scope][t.type][t.source];delete this.workerSources[e][t.scope][t.type][t.source],void 0!==s.removeSource?s.removeSource(t,o):o()}loadWorkerSource(e,t,o){try{this.self.importScripts(t.url),o()}catch(e){o(e.toString())}}syncRTLPluginState(t,o,s){try{e.e4.setState(o);const t=e.e4.getPluginURL();if(e.e4.isLoaded()&&!e.e4.isParsed()&&null!=t){this.self.importScripts(t);const o=e.e4.isParsed();s(o?void 0:new Error(`RTL Text Plugin failed to import scripts from ${t}`),o)}}catch(e){s(e.toString())}}setDracoUrl(e,t){this.dracoUrl=t}getAvailableImages(e,t){this.availableImages[e]||(this.availableImages[e]={});let o=this.availableImages[e][t];return o||(o=[]),o}getLayerIndex(e,t){this.layerIndexes[e]||(this.layerIndexes[e]={});let o=this.layerIndexes[e][t];return o||(o=this.layerIndexes[e][t]=new i,o.scope=t),o}getWorkerSource(e,t,o,s){return this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][s]||(this.workerSources[e][s]={}),this.workerSources[e][s][t]||(this.workerSources[e][s][t]={}),this.isSpriteLoaded[e]||(this.isSpriteLoaded[e]={}),this.workerSources[e][s][t][o]||(this.workerSources[e][s][t][o]=new this.workerSourceTypes[t]({send:(t,o,s,i,n,r)=>{this.actor.send(t,o,s,e,n,r)},scheduler:this.actor.scheduler},this.getLayerIndex(e,s),this.getAvailableImages(e,s),this.isSpriteLoaded[e][s],void 0,this.brightness)),this.workerSources[e][s][t][o]}getDEMWorkerSource(e,t,o){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][o]||(this.demWorkerSources[e][o]={}),this.demWorkerSources[e][o][t]||(this.demWorkerSources[e][o][t]=new h),this.demWorkerSources[e][o][t]}getRasterArrayWorkerSource(){return this.rasterArrayWorkerSource||(this.rasterArrayWorkerSource=new u),this.rasterArrayWorkerSource}enforceCacheSizeLimit(t,o){e.e5(o)}getWorkerPerformanceMetrics(e,t,o){o(void 0,void 0)}}return"undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof self&&self instanceof WorkerGlobalScope&&(self.worker=new Se(self)),Se}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
